//! OpenMP (Open Multi-Processing) 
// - It's an application programming interface (API) that supports 
//   multi-platform shared memory multiprocessing programming in C, C++, and Fortran. 
// - It is widely used for parallel programming on multi-core processors.

//! Key Concepts in OpenMP
//*  Parallel Region ('#pragma omp parallel'):
// - A block of code that will be executed by multiple threads.
// - Declared using '#pragma omp parallel' directive.

//* Work-sharing Construct:
// - Used to divide tasks among threads.
//   For example:
//      - '#pragma omp for'     : for loop parallelism 
//      - '#pragma omp sections': form dividing into section

//* Synchronization Construct:
// - Ensure correct ordering and access to shared resources
//   For example:
//      - '#pragma omp critical', 
//      - '#pragma omp barrier', 
//      - '#pragma omp atomic',
//      - '#pragma omp master'

//* Reductions:
// - Combine values from all threads into a single result
// - Declared using 'reductin(+:sum)' to sum values across threads

//* Environment Variables:
// - Used to control the execution of OpenMp programs
//   For example:
//      - OMP_NUM_THREADS: set the number of threads to use
//      - OMP_SCHEDULE   : set the scheduling method to use
